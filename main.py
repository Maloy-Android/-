import os
import requests
import datetime
import logging
from cachetools import TTLCache
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN") or "YOUR_TELEGRAMM_BOT_TOKEN"
DEVELOPER = "@MaloyBegonia"
CACHE_TTL = 600
REQUEST_TIMEOUT = 15

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

cache = TTLCache(maxsize=100, ttl=CACHE_TTL)

CRYPTO_SYMBOLS = {
    'BTC': '‚Çø Bitcoin', 'ETH': 'Œû Ethereum', 'BNB': 'üî∂ Binance Coin',
    'XRP': '‚úï Ripple', 'SOL': 'üîπ Solana', 'ADA': 'üÖ∞ Cardano',
    'DOGE': 'üêï Dogecoin', 'DOT': '‚óè Polkadot', 'SHIB': 'üêï Shiba Inu'
}

FIAT_SYMBOLS = {
    'USD': 'üíµ –î–æ–ª–ª–∞—Ä', 'EUR': 'üí∂ –ï–≤—Ä–æ', 'GBP': 'üí∑ –§—É–Ω—Ç',
    'CNY': 'üá®üá≥ –Æ–∞–Ω—å', 'JPY': 'üáØüáµ –ò–µ–Ω–∞', 'UAH': 'üá∫üá¶ –ì—Ä–∏–≤–Ω–∞'
}

class RateFetcher:
    @staticmethod
    async def fetch_rates():
        if 'rates' in cache:
            return cache['rates']

        try:
            cbr_data = await RateFetcher._fetch_cbr_rates()
            crypto_data = await RateFetcher._fetch_crypto_rates()
            uah_rate = await RateFetcher._fetch_uah_rate()

            rates = {
                'date': datetime.datetime.now().strftime('%d.%m.%Y %H:%M'),
                'fiat': cbr_data,
                'crypto': crypto_data
            }
            rates['fiat']['UAH'] = uah_rate

            cache['rates'] = rates
            return rates
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
            return None

    @staticmethod
    async def _fetch_cbr_rates():
        response = requests.get(
            'https://www.cbr-xml-daily.ru/daily_json.js',
            timeout=REQUEST_TIMEOUT
        )
        data = response.json()
        return {
            'USD': data['Valute']['USD']['Value'],
            'EUR': data['Valute']['EUR']['Value'],
            'GBP': data['Valute']['GBP']['Value'],
            'CNY': data['Valute']['CNY']['Value'],
            'JPY': data['Valute']['JPY']['Value'] / 100
        }

    @staticmethod
    async def _fetch_crypto_rates():
        crypto_ids = ['bitcoin', 'ethereum', 'binancecoin', 'ripple',
                    'solana', 'cardano', 'dogecoin', 'polkadot', 'shiba-inu']
        response = requests.get(
            'https://api.coingecko.com/api/v3/simple/price',
            params={
                'ids': ','.join(crypto_ids),
                'vs_currencies': 'usd,rub'
            },
            timeout=REQUEST_TIMEOUT
        )
        data = response.json()
        return {
            'BTC': data['bitcoin']['usd'],
            'ETH': data['ethereum']['usd'],
            'BNB': data['binancecoin']['usd'],
            'XRP': data['ripple']['usd'],
            'SOL': data['solana']['usd'],
            'ADA': data['cardano']['usd'],
            'DOGE': data['dogecoin']['usd'],
            'DOT': data['polkadot']['usd'],
            'SHIB': data['shiba-inu']['usd']
        }

    @staticmethod
    async def _fetch_uah_rate():
        try:
            response = requests.get(
                'https://api.privatbank.ua/p24api/pubinfo?json&exchange&coursid=5',
                timeout=REQUEST_TIMEOUT
            )
            return float(response.json()[0]['sale'])
        except:
            return 36.5

def get_keyboard():
    return {
        'start': ReplyKeyboardMarkup([[KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç")]], resize_keyboard=True),
        'main': ReplyKeyboardMarkup([
            ["üíµ USD", "üí∂ EUR", "üí∑ GBP"],
            ["üá®üá≥ CNY", "üáØüáµ JPY", "üá∫üá¶ UAH"],
            ["‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", "üìä –í—Å–µ –∫—É—Ä—Å—ã"],
            ["üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
        ], resize_keyboard=True),
        'crypto': ReplyKeyboardMarkup([
            ["‚Çø BTC", "Œû ETH", "üî∂ BNB"],
            ["‚úï XRP", "üîπ SOL", "üÖ∞ ADA"],
            ["üêï DOGE", "‚óè DOT", "üêï SHIB"],
            ["üîô –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)
    }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboards = get_keyboard()
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
        f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {DEVELOPER}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üöÄ –°—Ç–∞—Ä—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=keyboards['start']
    )

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—É—Ä—Å–∞\n"
        "- 'üìä –í—Å–µ –∫—É—Ä—Å—ã' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—É—Ä—Å—ã\n"
        "- 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å' - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "- '‚ÑπÔ∏è –ü–æ–º–æ—â—å' - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    keyboards = get_keyboard()

    if text == "üöÄ –°—Ç–∞—Ä—Ç":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboards['main'])
    elif text == "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=keyboards['crypto'])
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards['main'])
    elif text == "üìä –í—Å–µ –∫—É—Ä—Å—ã":
        await show_all_rates(update, context)
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
        await refresh_rates(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await handle_help(update, context)
    elif text in ["üá®üá≥ CNY", "üáØüáµ JPY", "üá∫üá¶ UAH"]: 
        currency = text.split()[-1] 
        await show_rate(update, context, currency)
    elif len(text) > 2 and text[2:] in {**FIAT_SYMBOLS, **CRYPTO_SYMBOLS}:
        await show_rate(update, context, text[2:])
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

async def show_rate(update: Update, context: ContextTypes.DEFAULT_TYPE, currency: str):
    rates = await RateFetcher.fetch_rates()
    if not rates:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        if currency in rates['fiat']:
            symbol = FIAT_SYMBOLS.get(currency, '')
            await update.message.reply_text(
                f"{symbol}\n–ö—É—Ä—Å: {rates['fiat'][currency]:.2f} RUB\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {rates['date']}"
            )
        elif currency in rates['crypto']:
            symbol = CRYPTO_SYMBOLS.get(currency, '')
            usd_rate = rates['fiat']['USD']
            await update.message.reply_text(
                f"{symbol}\n–¶–µ–Ω–∞: ${rates['crypto'][currency]:,.4f}\n"
                f"–í —Ä—É–±–ª—è—Ö: {rates['crypto'][currency] * usd_rate:,.2f} RUB\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {rates['date']}"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")

async def show_all_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rates = await RateFetcher.fetch_rates()
    if not rates:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
        return

    message = [f"–ö—É—Ä—Å—ã –Ω–∞ {rates['date']}\n\n–§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã:"]
    for curr, rate in rates['fiat'].items():
        symbol = FIAT_SYMBOLS.get(curr, '')
        message.append(f"{symbol}: {rate:.2f} RUB")

    message.append("\n–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:")
    for curr, price in rates['crypto'].items():
        symbol = CRYPTO_SYMBOLS.get(curr, '')
        message.append(f"{symbol}: ${price:,.4f}")

    await update.message.reply_text("\n".join(message))

async def refresh_rates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'rates' in cache:
        del cache['rates']
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è...")
    await show_all_rates(update, context)

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", handle_help))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    try:
        app.run_polling()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()
